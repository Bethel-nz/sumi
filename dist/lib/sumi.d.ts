import { Hono } from 'hono';
import { SumiConfig } from './types';
export declare class Sumi {
    app: Hono;
    private default_dir;
    private default_middleware_dir;
    private middlewareHandler;
    private app_base_path;
    private logger;
    private processedPaths;
    private uniqueRoutes;
    private staticConfig;
    private server;
    private config_port;
    private openapiConfig;
    private docsConfig;
    private hooks;
    private validatedEnv;
    private openApiSetup;
    private normalizeBasePath;
    private joinBase;
    private joinPath;
    constructor(default_args: SumiConfig);
    private generateMiddlewareTypes;
    private is_valid_file;
    private convertToHonoRoute;
    private build_routes;
    private handleFile;
    private resolveMiddleware;
    private processRouteFile;
    private applyRouteMethod;
    private clearRoutesAndMiddleware;
    private generateServerInfo;
    private setupOpenAPIEndpoints;
    burn(port?: number): Promise<void>;
    fetch(): (request: Request, Env?: unknown, executionCtx?: import("hono").ExecutionContext) => Response | Promise<Response>;
    private validateEnvironment;
    shutdown(): Promise<void>;
}
export declare function defineConfig(config: SumiConfig): SumiConfig;
export type { SumiConfig as SumiAppConfig, StaticRouteConfig, SumiContext, SumiHooks, DocsConfig, } from './types';
export type { Context as HonoContext, Next as HonoNext } from 'hono';
